#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Function to find the longest common substring
string longestCommonSubstring(const string& str1, const string& str2) {
    int n = str1.length();
    vector<vector<int>> L(n+1, vector<int>(n+1, 0));
    int maxLength = 0;
    int endPos = 0;

    // Build the table
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (str1[i-1] == str2[j-1]) {
                L[i][j] = L[i-1][j-1] + 1;
                if (L[i][j] > maxLength) {
                    maxLength = L[i][j];
                    endPos = i;
                }
            }
        }
    }

    // Output the 2D grid (table)
    cout << "Lookup Table:" << endl;
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            cout << L[i][j] << " ";
        }
        cout << endl;
    }

    // Return the longest common substring
    return str1.substr(endPos - maxLength, maxLength);
}

int main() {
    string str1, str2;
    cout << "Enter first string: ";
    cin >> str1;
    cout << "Enter second string: ";
    cin >> str2;

    string result = longestCommonSubstring(str1, str2);
    cout << "Longest common substring: " << result << endl;
    cout << "Length of longest common substring: " << result.length() << endl;

    return 0;
}
